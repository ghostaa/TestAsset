package com.ibm.btt.banco.operation;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.ibm.btt.base.BTTServerOperation;
import com.ibm.btt.base.DSEInvalidArgumentException;
import com.ibm.btt.base.DSEObjectNotFoundException;
import com.ibm.btt.base.DataElement;
import com.ibm.btt.base.IndexedCollection;
import com.ibm.btt.base.KeyedCollection;
import com.ibm.btt.base.ws.WSUtil;

/**
 * Class Generated by BTT Tool Created since: 2011/03/09 12:53:59
 */
public class InitCityOp extends BTTServerOperation {
	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 */
	public void execute() throws Exception {

		System.out.println("InitCityOp execute");

		System.out.println(this.getContext().getKeyedCollection());

		System.out.println(this.getContext().getParent().getKeyedCollection());
		
		Document dom = createDocument();
		
		parseDocument(dom);
		
		loadDataToOp();
		
		System.out.println("------------------------------------------------------------");
		
		System.out.println(this.getContext().getKeyedCollection());
		
		System.out.println(this.getContext().getParent().getKeyedCollection());
		
		
	}
	
	private void loadDataToOp() throws DSEObjectNotFoundException, IOException, DSEInvalidArgumentException {
		
		IndexedCollection diplaylist = (IndexedCollection) this.getElementAt("listCityDisplay");
		diplaylist.removeAll();
		
		IndexedCollection data = (IndexedCollection) this.getElementAt("listCity");
		
		for (int i = 0; i < data.size(); i++) {
			KeyedCollection keyedCollection = (KeyedCollection) DataElement.readObject("citysDisplay");
			keyedCollection.setValueAt("label", data.getValueAt(i + ".name"));
			keyedCollection.setValueAt("value", i);
			diplaylist.addElement(keyedCollection);
		}
		
	}
	
	private Document createDocument() {
		Document dom = null;
		// get the factory
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		// Using factory get an instance of document builder
		DocumentBuilder db = null;

		try {

			db = dbf.newDocumentBuilder();
			StringBuilder sb = new StringBuilder(WSUtil.class.getProtectionDomain().getCodeSource().getLocation().toString());
			sb.delete(sb.indexOf("/WEB-INF"), sb.length());
			sb.append("/listFiles/cityList.xml");
			
			dom = db.parse(sb.toString());

		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (SAXException se) {
			se.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
		
		return dom;
	}
	
	private void parseDocument(Document dom) throws DSEObjectNotFoundException, IOException, DSEInvalidArgumentException {
		// get the root elememt
		Element docEle = dom.getDocumentElement();

		IndexedCollection lsitCity = (IndexedCollection) this.getElementAt("listCity");

		lsitCity.removeAll();
		
		// get a nodelist of <employee> elements
		NodeList nl = docEle.getElementsByTagName("city");
		if (nl != null && nl.getLength() > 0) {
			for (int i = 0; i < nl.getLength(); i++) {

				// get the employee element
				Element el = (Element) nl.item(i);

				// get the Employee object
				KeyedCollection e = getCity(el);

				// add it to list
				lsitCity.addElement(e);
			}
		}
	}

	private KeyedCollection getCity(Element ele) throws IOException, DSEInvalidArgumentException, DSEObjectNotFoundException {
		
		KeyedCollection city = (KeyedCollection) DataElement.readObject("city");
		
		IndexedCollection listBranch = (IndexedCollection) city.getElementAt("listBranch");
		
		listBranch.removeAll();
		
		city.setValueAt("name", getTextValue(ele,"name"));
		city.setValueAt("address", getTextValue(ele,"address"));
		
		NodeList nl = ele.getElementsByTagName("branch");
		if (nl != null && nl.getLength() > 0) {
			for (int i = 0; i < nl.getLength(); i++) {

				// get the employee element
				Element el = (Element) nl.item(i);

				// get the Employee object
				KeyedCollection e = getBranch(el);

				// add it to list
				listBranch.addElement(e);
			}
		}
		return city;
	}
	
	private KeyedCollection getBranch(Element ele) throws IOException, DSEInvalidArgumentException, DSEObjectNotFoundException {
		KeyedCollection branch = (KeyedCollection) DataElement.readObject("branch");
		
		branch.setValueAt("name", getTextValue(ele,"name"));
		branch.setValueAt("address", getTextValue(ele,"address"));
		
		
		return branch;
	}

	private String getTextValue(Element ele, String tagName) {
		String textVal = null;
		NodeList nl = ele.getElementsByTagName(tagName);
		if (nl != null && nl.getLength() > 0) {
			Element el = (Element) nl.item(0);
			textVal = el.getFirstChild().getNodeValue();
		}
		return textVal;
	}
	
	
}
