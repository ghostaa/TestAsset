/*
 * Licensed Materials - Property of IBM
 * Restricted Materials of IBM
 * 5724-H82
 * (C) Copyright IBM Corp.2010 All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp
*/

dojo.provide("com.ibm.btt.dijit.Message"); 


dojo.require("dijit._Templated"); 
dojo.require("dijit._Widget"); 
dojo.require("dijit.Dialog");

dojo.requireLocalization("com.ibm.btt.dijit", "Message");

dojo.require("com.ibm.btt.dijit.AbstractWidgetMixin");
dojo.require("com.ibm.btt.util.I18nBundle");

/**
 * The widget for "component manage error and warning messages".
 * 
 * Alpha developer can customize the style of the level of messages by convention. The css file is css/dijit/message.css.
 */
dojo.declare("com.ibm.btt.dijit.Message",[dijit._Widget,dijit._Templated,com.ibm.btt.dijit.AbstractWidgetMixin] ,{ 
	
	templateString : "<div><div dojoAttachPoint='staticHolder'><span dojoAttachPoint='staticMessageHolder' class='dijitLabelBase' role='alert'></span><span role='button' dojoAttachPoint='closeHandler' style='margin:0 0 0 5px;text-decoration:underline;cursor:pointer' tabIndex='0'></span></div><div dojoAttachPoint='dialogHolder'><span dojoAttachPoint='popupMessageHolder' class='dijitLabelBase'></span></div></div>",	//TODO , 1) add a close icon 2) add a label icon, to make it more beautifil
	
	level : "ERROR",		// get the default level from server-side. It should be generated by tooling base on user's configuration.
	text : "",				// the value of binding of dataName in current BTTContext, it's text.
	styleClass : "",		// style of the level of messages
	name : "",				// binded dataName
	messageArray : "",
	_popupDialog : null,		// popup dijit object
	isNotSubmitted : true,
	displayMode : "STATIC",	//default is static mode display, not popup
	width : "",
	height : "",
	textWrap : false,
	
	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
	}),
	
	postMixInProperties : function(){
		this.inherited(arguments);
		this.bundle = new com.ibm.btt.util.I18nBundle("com.ibm.btt.dijit", "Message");
	},
	
	postCreate:function(){
		this._init();
		this._showHideCloseHandler(false);
		if(this.text) {
			this.display(this.text, this.level);
		} else if (this.messageArray) {
			try {
				var tempArray = dojo.fromJson(this.messageArray);
				this.displayMessageArray(tempArray);
			} catch (e) {
				
			}
		}
	},
	
	_init:function(){
		this.closeHandler.innerHTML = this.bundle.getMessage("closeMessage");
		this.styleClass = {
			"ERROR":"errorMessage",
			"WARN":"warnMessage",
			"INFO":"infoMessage"
		};
		this.connect(this.closeHandler, "ondijitclick", "closeMessage");
//		dojo.connect(this.closeHandler, "onclick", this,"closeMessage");
//		dojo.connect(this.closeHandler, "onkeydown", this, function(e){
//			if (e.keyCode==dojo.keys.SPACE || e.keyCode==dojo.keys.ENTER)
//			{
//				dojo.stopEvent(e);
//				this.closeMessage();
//				return false;
//			}	
//		});
	},
	
	/**
	 * Display the message at xx level . API for beta developer. text should be NLS aware
	 * 
	 * For dynamic values, the message should be a template like this : TRANSFER_ERROR:Your {account} doesn't can't transfer value exceeds {amount}.
	 * Alpha developer can invoke the API like message1.display("TRANSFER_ERROR","ERROR", accountTextbox1.value, amounTextbox1.value);
	 * 
	 * When the text is NLS key , whose value is template, user need pass in both the level and the value array.
	 * 
	 * @param text the message content 
	 * @param level level including ERROR, WARN , INFO. it's optional
	 */
	display:function(text, level){	//FIXME, the API define. We can't support both display(text, dynamic attributes ) and display(text, level ) etc.
		if ((text  === ""  )||(text === null) || (text === undefined)){	//empty , or null, don't display it at null
			console.info("[display] Need text message for displaying");
			this._showHideCloseHandler(false);
			return; 
		}
			
		var message = this._getMessageValue.apply(this, arguments);		//1. get message value
		this.staticMessageHolder.innerHTML = message;	//display it
		
		if(level === undefined){
			level = this.level; 	//use the default level
		}
		
		this._switchModeAndStyles("STATIC", level);
		this._showHideCloseHandler(true);
		this.set("visibility", "inherit");
	},
	
	displayMessageArray : function(mesArray) {
		if(mesArray.length > 0) {
			var strArray = [];
			for(var i = 0; i < mesArray.length; i ++) {
				strArray.push((i + 1) + " ");
				strArray.push(this._getMessageValue(mesArray[i]));
				if(i != mesArray.length - 1) 
					strArray.push("<br>");
			}
			
			var message = strArray.join("");
			if(this.displayMode === "STATIC") {
				this.display(message);
			} else {
				this.displayPopup(message);
			}
		}
	}, 

	/**
	 * 
	 * Flag is true, then show ; else hide closeHanlder node
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	_showHideCloseHandler:function(flag){
		if(flag){
			dojo.style(this.closeHandler,{
				"display" : ""
			});
		}else{
			dojo.style(this.closeHandler,{
				"display" : "none"
			});
		}
		
	},
	
	/**
	 * Display the message at xx level in popup way
	 * 
	 * For dynamic values, the message should be a template like this : TRANSFER_ERROR:Your {account} doesn't can't transfer value exceeds {amount}.
	 * Alpha developer can invoke the API like message1.display("TRANSFER_ERROR","ERROR", accountTextbox1.value, amounTextbox1.value);
	 * 
	 * When the text is NLS key , whose value is template, user need pass in both the level and the value array.
	 * 
	 * @text message content
	 * @level level including ERROR, WARN , INFO. level is optional
	 */
	displayPopup:function(text, level){ //FIXME, the API define. We can't support both display(text, dynamic attributes ) and display(text, level ) etc.
	
		if ((text  === ""  )||(text === null) || (text === undefined)){	//empty , or null, don't display it at null
			console.info("[displayPopup] Need text message for displaying")
			return; 
		}
		var message = this._getMessageValue.apply(this,arguments);		//1. get message value
		this.popupMessageHolder.innerHTML = message;	//display it
		if(level === undefined){
			level = this.level; 	//use the default level
		}
		this._switchModeAndStyles("POPUP",level);
		if (this._popupDialog === null) {
			var dialogId = this.id + "messagePopup";
			this._popupDialog = new dijit.Dialog( {
				id : dialogId,
				style : "min-width:300px;",
				title : this.bundle.getMessage("popupTitle") // i18n for this.
			}, this.dialogHolder);
		}
		// this._popupDialog.show();
		this.set("visibility", "inherit");
	},
	
	/**
	 * public method, developer can invoke this api to close the displayed mesage. Either static label or popup messages
	 */
	closeMessage:function(){
		this.set("visibility", "gone");
//		if(this.displayMode === "STATIC"){
//			dojo.style(this.staticHolder,{
//				"display":"none"
//			});
//		}else {
//			if(this._popupDialog !== null){
//				this._popupDialog.hide();
//			}
//		}
	},
	
	_setVisibilityAttr : function(value){
		this.inherited(arguments);

		if(this.displayMode !== "STATIC" && this._popupDialog){
			if (value=="gone" || value=="hidden"){
				if (this._popupDialog.open){
					this._popupDialog.hide();
				}
			}else{
				if (!this._popupDialog.open){
					this._popupDialog.show();
				}
			}
		}
	},
	
	_setTextWrapAttr : function(value){
		this.textWrap = value;
		this._setTextLabelStyle();
	},
	
	/**
	 * 
	 * hook method for width method
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	
	_setWidthAttr : function(value) {
		if (value != "" && value != null) {
			this.width = value;
			dojo.style(this.staticMessageHolder, "width", this.handleLenUint(this.width));
			dojo.style(this.popupMessageHolder, "width", this.handleLenUint(this.width));
		}
	},
	
	/**
	 * 
	 * hook method for height method
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	
	_setHeightAttr : function(value) {
		if (value != "" && value != null) {
			this.height = value;
			dojo.style(this.staticMessageHolder, "height", this.handleLenUint(this.height));
			dojo.style(this.popupMessageHolder, "height", this.handleLenUint(this.height));
		}
	},
	
	/**
	 * 
	 * internal method to set the mode and style for widget
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	_switchModeAndStyles : function(mode, level) {
		this.displayMode = mode;
		
		if(this.displayMode === "STATIC"){
			dojo.style(this.staticHolder,{
				"display" : ""
			});
			dojo.style(this.dialogHolder,{
				"display" : "none"
			});
			if(this._popupDialog !== null){
				this._popupDialog.hide();
			}
			dojo.removeClass(this.staticMessageHolder);
			dojo.addClass(this.staticMessageHolder,this.styleClass[level]);	//apply the style class of the level...
		} else {
			dojo.style(this.dialogHolder,{
				"display" : ""
			});
			dojo.style(this.staticHolder,{
				"display" : "none"
			});
			dojo.removeClass(this.popupMessageHolder);
			dojo.addClass(this.popupMessageHolder, this.styleClass[level]);	//apply the style class of the level...
		}
		this._setTextLabelStyle();
	},
	
	_setTextLabelStyle : function(){
		dojo.addClass(this.popupMessageHolder, "dijitLabelBase");
		if (this.textWrap == true) {
			dojo.addClass(this.popupMessageHolder, "dijitLabelWrap");
		} else {
			dojo.removeClass(this.popupMessageHolder, "dijitLabelWrap");
		}
		dojo.addClass(this.staticMessageHolder, "dijitLabelBase");
		if (this.textWrap == true) {
			dojo.addClass(this.staticMessageHolder, "dijitLabelWrap");
		} else {
			dojo.removeClass(this.staticMessageHolder, "dijitLabelWrap");
		}
	},
	
	/**
	 * 
	 * hook method for message attribute
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	_getMessageValue:function(text,level){
		//1) get i18n value   2) if it's a template, Message1.display(��ERROR��, ��CROSS_FILED_VALIDATION_ERROR��,��{ xx : cbcrossbank.value, xx:xxx});
		var message = ""; 
		if(arguments.length  === 1 ){	//only one argument, it's text
			message = StringUtil.escapeEnterWrap(this.getI18NString(text)); 	//geti18n value...	
		}else if(arguments.length === 2){	 // text, level ,
			message = StringUtil.escapeEnterWrap(this.getI18NString(text)); 	//geti18n value...
		}else if(arguments.length > 2){		//text, level, dynamic attributes...
			var values = [];
			for(var i= 2; i< arguments.length; i++){
				values.push(arguments[i]);
			}
			console.debug("display,dynamic attributes values",values);
			message = StringUtil.escapeEnterWrap(this.getI18NString(text,values,true));
		}
		
		return message;
	},

	/**
	 * 
	 * hook method for value attribute
	 * For AJAX response error scenario, it will use the name,value pairs to reset all the widget's values
	 * 
	 * @tag private this is a internal method, may be changed or removed in later version
	 *              please do not use this method in customer code.
	 * */
	_setValueAttr:function(value){
		this.text = value;
	},
	
	destroy : function() {
		this.inherited(arguments);
		if(this._popupDialog !== null){
			this._popupDialog.destroyRecursive();		//set free the dijit dialog	
		}
	}
	
});
