package com.ibm.btt.test.util;

import java.util.Random;

import com.ibm.btt.base.IndexedCollection;
import com.ibm.btt.base.KeyedCollection;

/**
 * Class Generated by BTT Tool Created since: 2013/05/03 16:09:48
 */
public class PaginationUtilForTest {
	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 */
	Random ran = new Random();
	private static int rowsPerPage;
	private static int total;
	private static int pageNumber;
	private static int pageSize;

	public static IndexedCollection paginateTheIColl(KeyedCollection paginationData,
			IndexedCollection allIColl, IndexedCollection expectedIColl)
			throws Exception {
		Object pageNum = paginationData.getValueAt("pageNumber");
		if (pageNum == null || pageNum.equals(0)) {
			pageNumber = 1;
		} else {
			pageNumber = (Integer) pageNum;
		}
		Object perPage = paginationData.getValueAt("rowsPerPage");
		if(perPage == null || perPage.equals(0)){
			rowsPerPage = 10;
		}else {
			rowsPerPage = (Integer) perPage;
		}
		total = allIColl.size();
		pageSize = total / rowsPerPage;
		if (total % rowsPerPage > 0) {
			pageSize++;
		}

		paginationData.setValueAt("totalRowNumber", total);
		paginationData.setValueAt("pageNumber", pageNumber);

		if (pageNumber <= 1) {
			paginationData.setValueAt("enableNext", "true");
			paginationData.setValueAt("enablePrevious", "false");
		} else if (pageNumber == pageSize) {
			paginationData.setValueAt("enableNext", "false");
			paginationData.setValueAt("enablePrevious", "true");
		} else {
			paginationData.setValueAt("enableNext", "true");
			paginationData.setValueAt("enablePrevious", "true");
		}

		// business data
		int fromRowNum = (pageNumber - 1) * rowsPerPage;
		int toRowNum = 0;
		if (total != 0) {
			if (pageNumber != pageSize || total % rowsPerPage == 0) {
				toRowNum = pageNumber * rowsPerPage;
			} else {
				toRowNum = fromRowNum + total % rowsPerPage;
			}
		}
		expectedIColl.removeAll();
		for (int i = fromRowNum; i < toRowNum; i++) {
			KeyedCollection oneRecord = (KeyedCollection) allIColl.getElementAt(i);
			expectedIColl.addElement(oneRecord);
		}
		return expectedIColl;
	}

}
