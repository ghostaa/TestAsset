package com.ibm.btt.application.op.B004;
import java.util.Map;
import java.util.Random;

import com.ibm.btt.base.BTTServerOperation;
import com.ibm.btt.base.Context;
import com.ibm.btt.base.DataElement;
import com.ibm.btt.base.DataField;
import com.ibm.btt.base.IndexedCollection;
import com.ibm.btt.base.KeyedCollection;
import com.ibm.btt.base.Vector;
import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONObject;
/** 
 * Class Generated by BTT Tool
 * Created since: 2013/08/26 11:32:27
 */
public class TableListOp extends BTTServerOperation {
  /** 
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 */
  public void execute() throws Exception {
	  Context context = getContext();

	  try {
		  JSONObject l_json = JSONObject.parse(getClass().getResourceAsStream("states.json"));
		  Object l_root = l_json.get("root");
		  if ( l_root instanceof JSONArray ) {
			  JSONArray l_result = (JSONArray)l_root;

			  //pagination
			  int li_start = -1, li_count = -1;
			  Object l_pagination = context.getValueAt("pagination");
			  if ( l_pagination instanceof Map ) {
				  Map<?, ?> l_data = (Map<?, ?>)l_pagination;
				  Object l_start = l_data.get("start");
				  if ( l_start instanceof DataField ) {
					  Object l_value = ((DataField)l_start).getValue();
					  if ( l_value instanceof Long ) {
						  li_start = ((Long) l_value).intValue();
					  }
				  }
				  Object l_count = l_data.get("count");
				  if ( l_count instanceof DataField ) {
					  Object l_value = ((DataField)l_count).getValue();
					  if ( l_value instanceof Long ) {
						  li_count = ((Long) l_value).intValue();
					  }
				  }
			  }
		
			  System.out.printf("Start: %d, Count: %d%n", li_start, li_count);
		
				Object l_list = context.getElementAt("listFL");
				Vector l_instance = (Vector)context.getValueAt("listFL");
				if ( l_list instanceof IndexedCollection ) {
					l_instance.clear();
		
					IndexedCollection l_idx_list = (IndexedCollection)l_list;
					int li_start_idx = li_start>=0?li_start:0;
					int li_end_idx = li_start_idx + (li_count>0?li_count:l_result.size());
					
					Random l_random = new Random();
		
					for ( int i = li_start_idx; i < li_end_idx; i++ ) {
						DataElement l_element = l_idx_list.createElement(false);
						if ( l_element instanceof KeyedCollection ) {
							Object l_data = l_result.get(i);
							if ( l_data instanceof JSONObject ) {
								JSONObject l_json_item = (JSONObject)l_data;
		
								KeyedCollection l_item = (KeyedCollection)l_element;
								l_item.setValueAt("id", i + "_" + l_json_item.get("id"));
								l_item.setValueAt("label", l_json_item.get("label"));
								
								//amount
								l_item.setValueAt("amount", new Float( (l_random.nextFloat() * 10000)));
								l_item.setValueAt("size", new Float(l_random.nextFloat() * 2500));

								l_instance.addElement(l_item);
							}
						}
					}
				}
				
				if ( l_pagination instanceof Map ) {
					  Map<?, ?> l_data = (Map<?, ?>)l_pagination;
					  Object l_total = l_data.get("total");
					  if ( l_total instanceof DataField ) {
						  ((DataField) l_total).setValue(l_result.size());
					  }
				}
		  }
	  } catch (Exception ex) {
		  ex.printStackTrace();
		  throw ex;
	  }
	  this.fireExitEvent("opEvt");
  }
}
